buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE"
		classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:1.0.0.RELEASE"
	}
}

group = 'com.example.github'
version = getProp('newVersion') ?: '0.0.1-SNAPSHOT'

repositories {
	mavenCentral()
}

apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'spring-cloud-contract'
apply plugin: 'maven-publish'

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:$BOM_VERSION"
	}
}

contracts {
	baseClassForTests = 'org.springframework.github.contract.BaseClass'
}

dependencies {
	compile ('org.springframework.analytics:spring-analytics:1.0.0.RELEASE')
	compile ('org.springframework.cloud:spring-cloud-starter-eureka')
	compile ('org.hibernate:hibernate-validator')
	compile ('org.springframework.cloud:spring-cloud-starter-stream-rabbit')

	testCompile ('org.springframework.cloud:spring-cloud-starter-contract-stub-runner')
	testCompile ('org.springframework.cloud:spring-cloud-stream-test-support')
	testCompile ('org.springframework.cloud:spring-cloud-starter-contract-verifier')
	testCompile ('org.awaitility:awaitility:2.0.0')
}

test {
	description = "Task to run unit and integration tests"
	testLogging {
		exceptionFormat = 'full'
	}
	jvmArgs = systemPropsFromGradle()
	include 'org/springframework/**'
}

task smoke(type: Test) {
	description = "Task to run smoke tests"
	testLogging {
		exceptionFormat = 'full'
	}
	jvmArgs = systemPropsFromGradle()
	include 'smoke/**'
}

task e2e(type: Test) {
	description = "Task to run end to end tests"
	testLogging {
		exceptionFormat = 'full'
	}
	jvmArgs = systemPropsFromGradle()
	include 'e2e/**'
}

task deploy(dependsOn: 'publish') {
	description = "Abstraction over publishing artifacts to Artifactory / Nexus"
}

publishing {
	repositories {
		maven {
			url getProp('REPO_WITH_JARS') ?: 'http://localhost:8081/artifactory/libs-release-local'
			credentials {
				username getProp('M2_SETTINGS_REPO_USERNAME') ?: 'artifactory'
				password getProp('M2_SETTINGS_REPO_PASSWORD') ?: 'password'
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId project.name
			from components.java
		}
	}
}

private List<String> systemPropsFromGradle() {
	return project.gradle.startParameter.systemPropertiesArgs.entrySet().collect { "-D${it.key}=${it.value}" }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

String getProp(String propName) {
	return hasProperty(propName) ? (getProperty(propName) ?: System.properties[propName]) : System.properties[propName]
}
